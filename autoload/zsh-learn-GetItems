# -*- mode: sh -*-
# vim: set ft=sh:
function zsh-learn-GetItems(){

    local ids item id learn
    local format="$1"

    if echo $search | grep -qsE '^[[:digit:]]+$'; then
        #int
        ZPWR_VARS[id]=$(echo "select id from $ZPWR_SCHEMA_NAME.$ZPWR_TABLE_NAME order by dateAdded" | ${=ZPWR_LEARN_COMMAND} | perl -ne "print if \$. == quotemeta('$search')")
        if [[ -z $ZPWR_VARS[id] ]]; then
            continue
        fi
        ZPWR_VARS[item]=$(echo "select learning from $ZPWR_SCHEMA_NAME.$ZPWR_TABLE_NAME where id=$ZPWR_VARS[id]" | ${=ZPWR_LEARN_COMMAND} 2>> $ZPWR_LOGFILE | tail -n 1)
        ZPWR_VARS[item]=${ZPWR_VARS[item]//\'/\\\'\'}

        if [[ $format == none ]]; then
            echo "$ZPWR_VARS[item]"
        elif [[ $format == sql ]]; then
            echo "update $ZPWR_SCHEMA_NAME.$ZPWR_TABLE_NAME set learning = '$ZPWR_VARS[item]' where id=$ZPWR_VARS[id]"
        else
            echo "echo 'update $ZPWR_SCHEMA_NAME.$ZPWR_TABLE_NAME set learning = ""''"$ZPWR_VARS[item]"''"" where id=$ZPWR_VARS[id]' | ${ZPWR_LEARN_COMMAND}"
        fi
    else
        #regex
        ids=$(echo "select id,learning from $ZPWR_SCHEMA_NAME.$ZPWR_TABLE_NAME order by dateAdded" | ${=ZPWR_LEARN_COMMAND} | perl -lne 'do{$id=$1;$l=$2;print "$id $l" if $l =~ m{'$search'}i} if m{^(\d+)\s(.*)$}')
        for item in ${(f)ids[@]}; do
            id=${item%% *}
            learn=${item#* }
            learn=${learn//\'/\\\'\'}
            if [[ $format == none ]]; then
                echo "$learn"
            elif [[ $format == sql ]]; then
                echo "update $ZPWR_SCHEMA_NAME.$ZPWR_TABLE_NAME set learning = '$learn' where id=$id"
            else
                echo "echo 'update $ZPWR_SCHEMA_NAME.$ZPWR_TABLE_NAME set learning = ""''"$learn"''"" where id=$id' | ${ZPWR_LEARN_COMMAND}"
            fi
        done
    fi
}

zsh-learn-GetItems "$@"
